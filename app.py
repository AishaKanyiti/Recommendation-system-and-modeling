# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UF6bwTBHPDWqq7Rokf11RvKwHw5nlHID
"""

import streamlit as st
import numpy as np
import pickle
import scipy.sparse as sp
import polars as pl

# --- Load Data & Models ---
@st.cache_resource
def load_model():
    with open("als_model.pkl", "rb") as f:
        als = pickle.load(f)
    return als

@st.cache_resource
def load_data():
    UI_csr = sp.load_npz("UI_csr.npz")
    with open("user_mappings.pkl", "rb") as f:
        user_id_to_idx, idx_to_user_id = pickle.load(f)
    with open("item_mappings.pkl", "rb") as f:
        item_id_to_idx, idx_to_item_id = pickle.load(f)
    return UI_csr, user_id_to_idx, idx_to_user_id, item_id_to_idx, idx_to_item_id

als = load_model()
UI_csr, user_id_to_idx, idx_to_user_id, item_id_to_idx, idx_to_item_id = load_data()

# --- Recommend Function ---
def recommend_cf(user_raw_id, N=10):
    if user_raw_id not in user_id_to_idx:
        return pl.DataFrame({"itemid": [], "score": []})

    uidx = user_id_to_idx[user_raw_id]

    try:
        ids, scores = als.recommend(uidx, UI_csr[uidx], N=N, recalculate_user=True)
    except IndexError:
        return pl.DataFrame({"itemid": [], "score": []})

    return pl.DataFrame({
        "itemid": [idx_to_item_id[i] for i in ids],
        "score": scores
    })

# --- Streamlit UI ---
st.title("üìä Personalized Recommendation System")
st.markdown("Select a **User ID** to get top-N recommendations.")

# Dropdown with searchable user IDs
user_ids = sorted(user_id_to_idx.keys())
user_input = st.selectbox("üîé Choose User ID:", options=user_ids, index=0)

# Slider for number of recs
top_n = st.slider("Number of Recommendations:", 1, 20, 10)

if st.button("Get Recommendations"):
    try:
        user_id = int(user_input)
        recs = recommend_cf(user_id, N=top_n)

        if recs.is_empty():
            st.warning("‚ö†Ô∏è No recommendations found for this user.")
        else:
            st.success(f"Top {top_n} recommendations for User {user_id}:")
            st.dataframe(recs)

    except Exception as e:
        st.error(f"‚ùå Error: {e}")